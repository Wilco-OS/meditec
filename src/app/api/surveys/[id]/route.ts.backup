import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import { Survey } from '@/models/Survey';
import dbConnect from '@/lib/dbConnect';
import mongoose from 'mongoose';

// Hilfsfunktion zur Überprüfung der ID-Gültigkeit
function validateAndCleanId(id: string | undefined): { isValid: boolean; cleanId: string | null; errorMessage: string | null } {
  if (!id) {
    return { isValid: false, cleanId: null, errorMessage: 'Fehlende Umfrage-ID' };
  }

  // Umfassendere Validierung für alle möglichen ungültigen Fälle
  if (
    id === 'undefined' || 
    id === 'null' || 
    id.trim() === '' || 
    id === '[object Object]' ||
    id === 'NaN' ||
    id.includes('undefined') ||
    /^\s*$/.test(id) // Nur Leerzeichen
  ) {
    console.error('API: Ungültige Umfrage-ID abgelehnt:', id);
    return { isValid: false, cleanId: null, errorMessage: 'Ungültige Umfrage-ID' };
  }

  // ID-Format für MongoDB validieren (24 Zeichen Hexadezimal)
  const cleanId = id.trim();
  if (!/^[0-9a-fA-F]{24}$/.test(cleanId)) {
    console.error('API: Umfrage-ID hat ungültiges MongoDB ObjectId-Format:', cleanId);
    return { isValid: false, cleanId: null, errorMessage: 'Umfrage-ID hat ungültiges Format' };
  }

  console.log('API: Gültige Umfrage-ID akzeptiert:', cleanId);
  return { isValid: true, cleanId, errorMessage: null };
}

// GET /api/surveys/[id] - Details einer einzelnen Umfrage abrufen
export async function GET(
  request: NextRequest,
  context: { params: { id: string } }
) {
  // Diese Struktur ist wichtig für Next.js App Router
  const id = context.params.id;
  
  console.log('GET-Anfrage für Umfrage erhalten, ID:', id);
  
  // ID validieren und bereinigen
  const validation = validateAndCleanId(id);
  if (!validation.valid) {
    console.error(`Fehler bei der ID-Validierung: ${validation.error}`);
    return NextResponse.json({ error: validation.error }, { status: 400 });
  }
  
  const cleanId = validation.cleanId!;
  console.log('Validierte Umfrage-ID:', cleanId);
  
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Nicht autorisiert' }, { status: 401 });
    }

    await dbConnect();

    const survey = await Survey.findById(cleanId).lean();

    if (!survey) {
      return NextResponse.json({ error: 'Umfrage nicht gefunden' }, { status: 404 });
    }

    // Prüfen, ob der Benutzer Zugriff auf diese Umfrage hat
    const isCompanyAdmin = session.user.role === 'company_admin';
    const isMeditecAdmin = session.user.role === 'meditec_admin';
    
    if (isCompanyAdmin && survey.assignedCompanies && 
        Array.isArray(survey.assignedCompanies) && 
        session.user.companyId &&
        !survey.assignedCompanies.some(companyId => 
          companyId && companyId.toString() === session.user.companyId?.toString()
        )) {
      return NextResponse.json({ error: 'Zugriff verweigert' }, { status: 403 });
    }

    // ID-Feld korrekt mappen für das Frontend
    const surveyWithId = {
      ...survey,
      id: survey._id ? survey._id.toString() : undefined
    };
    
    console.log('Umfrage abgerufen mit ID:', surveyWithId.id);

    return NextResponse.json(surveyWithId);
  } catch (error) {
    console.error('Fehler beim Abrufen der Umfrage:', error);
    return NextResponse.json({ error: 'Fehler beim Abrufen der Umfrage' }, { status: 500 });
  }
}

// PUT /api/surveys/[id] - Umfrage aktualisieren
export async function PUT(
  request: NextRequest,
  context: { params: { id: string } }
) {
  // Diese Struktur ist wichtig für Next.js App Router
  const id = context.params.id;
  
  console.log('PUT-Anfrage für Umfrage erhalten, ID:', id);
  
  // ID validieren und bereinigen
  const validation = validateAndCleanId(id);
  if (!validation.isValid) {
    console.error(`Fehler bei der ID-Validierung: ${validation.errorMessage}`);
    return NextResponse.json({ error: validation.errorMessage }, { status: 400 });
  }
  
  const cleanId = validation.cleanId!;
  console.log('Validierte Umfrage-ID für Update:', cleanId);
  
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Nicht autorisiert' }, { status: 401 });
    }

    // Nur Meditec-Admins dürfen Umfragen aktualisieren
    if (session.user.role !== 'meditec_admin') {
      return NextResponse.json({ error: 'Keine Berechtigung zur Aktualisierung von Umfragen' }, { status: 403 });
    }

    await dbConnect();

    // Umfrage finden
    const survey = await Survey.findById(cleanId);
    if (!survey) {
      return NextResponse.json({ error: 'Umfrage nicht gefunden' }, { status: 404 });
    }

    // Daten aus der Anfrage extrahieren
    const data = await request.json();
    
    // Teilaktualisierung oder vollständige Aktualisierung unterscheiden
    if (data.status && Object.keys(data).length === 1) {
      // Nur Status-Update
      console.log(`Aktualisiere Status der Umfrage ${id} zu ${data.status}`);
      survey.status = data.status;
      survey.updatedAt = new Date();
    } else {
      // Vollständige Aktualisierung der Umfrage
      const { title, description, blocks, assignedCompanies, isAnonymous, startDate, endDate, status } = data;
      
      // Pflichtfelder validieren
      if (title !== undefined) survey.title = title;
      if (description !== undefined) survey.description = description;
      if (blocks !== undefined) survey.blocks = blocks;
      if (assignedCompanies !== undefined) survey.assignedCompanies = assignedCompanies;
      if (isAnonymous !== undefined) survey.isAnonymous = isAnonymous;
      if (startDate !== undefined) survey.startDate = startDate;
      if (endDate !== undefined) survey.endDate = endDate;
      if (status !== undefined) survey.status = status;
      
      survey.updatedAt = new Date();
    }

    await survey.save();
    
    // Umfrageobjekt mit korrekter ID für Frontend zurückgeben
    const updatedSurvey = survey.toObject();
    if (updatedSurvey._id) {
      updatedSurvey.id = updatedSurvey._id.toString();
    }
    
    console.log('Umfrage aktualisiert mit ID:', updatedSurvey.id);

    return NextResponse.json({
      message: 'Umfrage erfolgreich aktualisiert',
      survey: updatedSurvey
    });
  } catch (error) {
    console.error('Fehler beim Aktualisieren der Umfrage:', error);
    return NextResponse.json({ error: 'Fehler beim Aktualisieren der Umfrage' }, { status: 500 });
  }
}

// DELETE /api/surveys/[id] - Umfrage löschen
export async function DELETE(
  request: NextRequest,
  context: { params: { id: string } }
) {
  // Diese Struktur ist wichtig für Next.js App Router
  const id = context.params.id;
  
  console.log('DELETE-Anfrage für Umfrage erhalten, ID:', id);
  
  // ID validieren und bereinigen
  const validation = validateAndCleanId(id);
  if (!validation.valid) {
    console.error(`Fehler bei der ID-Validierung: ${validation.error}`);
    return NextResponse.json({ error: validation.error }, { status: 400 });
  }
  
  const cleanId = validation.cleanId!;
  console.log('Validierte Umfrage-ID für Löschung:', cleanId);
  
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Nicht autorisiert' }, { status: 401 });
    }

    // Nur Meditec-Admins dürfen Umfragen löschen
    if (session.user.role !== 'meditec_admin') {
      return NextResponse.json({ error: 'Keine Berechtigung zum Löschen von Umfragen' }, { status: 403 });
    }

    await dbConnect();

    const survey = await Survey.findByIdAndDelete(cleanId);
    if (!survey) {
      return NextResponse.json({ error: 'Umfrage nicht gefunden' }, { status: 404 });
    }

    return NextResponse.json({ message: 'Umfrage erfolgreich gelöscht' });
  } catch (error) {
    console.error('Fehler beim Löschen der Umfrage:', error);
    return NextResponse.json({ error: 'Fehler beim Löschen der Umfrage' }, { status: 500 });
  }
}
